"""
Module pour les tests de performance.
Fournit des outils pour √©valuer les performances de K16.
"""

import os
import time
import datetime
import numpy as np
import argparse
from typing import List, Dict, Any, Tuple

from k16.utils.config import ConfigManager
from k16.io.reader import read_vectors, load_tree
from k16.search.searcher import Searcher

def format_time(seconds: float) -> str:
    """Formate le temps en heures, minutes, secondes."""
    return str(datetime.timedelta(seconds=int(seconds)))

def test_command(args: argparse.Namespace) -> int:
    """
    Commande pour tester les performances de recherche dans un arbre.

    Args:
        args: Arguments de ligne de commande

    Returns:
        int: Code de retour (0 pour succ√®s, autre pour erreur)
    """
    # Initialisation du gestionnaire de configuration
    config_manager = ConfigManager(args.config)

    # R√©cup√©ration des param√®tres pour la recherche
    search_config = config_manager.get_section("search")
    files_config = config_manager.get_section("files")

    try:
        evaluate_msg = "avec √©valuation des performances" if args.evaluate else "sans √©valuation"
        print(f"üîç Test de l'arbre K16 {evaluate_msg}...")
        print(f"  - Vecteurs: {args.vectors_file}")
        print(f"  - Arbre: {args.tree_file}")
        print(f"  - Mode: {args.mode}")
        print(f"  - K (nombre de voisins): {args.k}")
        print(f"  - Type de recherche: {args.search_type}")
        print(f"  - Largeur de faisceau: {args.beam_width}")
        print(f"  - Requ√™tes de test: {args.queries}")

        # Charger les vecteurs
        print(f"‚è≥ Chargement des vecteurs depuis {args.vectors_file}...")
        vectors_reader = read_vectors(
            file_path=args.vectors_file,
            mode=args.mode,
            cache_size_mb=args.cache_size
        )
        print(f"‚úì Vecteurs charg√©s: {len(vectors_reader):,} vecteurs de dimension {vectors_reader.d}")

        # Charger l'arbre
        print(f"‚è≥ Chargement de l'arbre depuis {args.tree_file}...")
        tree = load_tree(args.tree_file, mmap_tree=(args.mode == "mmap"))
        print(f"‚úì Arbre charg√©")

        # S√©lection des requ√™tes de test
        print(f"‚è≥ S√©lection de {args.queries} requ√™tes al√©atoires...")
        np.random.seed(42)  # Pour des r√©sultats reproductibles

        if args.queries < len(vectors_reader):
            query_indices = np.random.choice(len(vectors_reader), args.queries, replace=False)
        else:
            query_indices = np.arange(len(vectors_reader))

        query_vectors = vectors_reader[query_indices]
        print(f"‚úì {len(query_indices)} requ√™tes s√©lectionn√©es")

        # Cr√©er un chercheur pour l'√©valuation
        searcher = Searcher(
            k16tree=tree,
            vectors_reader=vectors_reader,
            use_faiss=args.use_faiss,
            search_type=args.search_type,
            beam_width=args.beam_width
        )

        # √âvaluer les performances avec recall et acc√©l√©ration
        print(f"‚è≥ √âvaluation des performances avec k={args.k}, mode={args.search_type}...")
        results = searcher.evaluate_search(query_vectors, k=args.k)

        # Afficher un r√©capitulatif des r√©sultats
        print(f"\n‚úì √âvaluation termin√©e")
        print(f"  ‚Üí Recall: {results['avg_recall']*100:.2f}%")
        print(f"  ‚Üí Acc√©l√©ration: {results['speedup']:.2f}x plus rapide que la recherche na√Øve")
        print(f"  ‚Üí Temps moyen (arbre): {results['avg_tree_time']*1000:.2f} ms")
        print(f"  ‚Üí Temps moyen (filtrage): {results['avg_filter_time']*1000:.2f} ms")
        print(f"  ‚Üí Temps moyen total: {results['avg_total_time']*1000:.2f} ms")
        print(f"  ‚Üí Temps moyen (na√Øf): {results['avg_naive_time']*1000:.2f} ms")
        print(f"  ‚Üí Nombre moyen de candidats: {results['avg_candidates']:.1f}")

        # Conseils d'optimisation
        print(f"\nüí° Conseils d'optimisation:")
        print(f"  ‚Üí Utilisez le mode 'ram' pour la vitesse maximale si la m√©moire le permet")
        print(f"  ‚Üí Utilisez le mode 'mmap' pour √©conomiser la m√©moire avec peu d'impact sur les performances")
        print(f"  ‚Üí Augmentez max_data lors de la construction pour am√©liorer le recall")

    except Exception as e:
        print(f"\n‚ùå Erreur: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1

    return 0